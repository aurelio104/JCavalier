// ‚úÖ src/flows/ecommerce.flow.ts

import { addKeyword, FlowFnProps } from '@bot-whatsapp/bot'
import { empresaConfig } from '../config/empresaConfig'  // Importamos la configuraci√≥n de la empresa
import { detectIntent, analyzeEmotion } from '@intelligence/intent.engine'
import { saveConversationToMongo } from '@memory/memory.mongo'
import { paymentFlow } from './payment.flow'
import { contienePedidoDesdeWeb, parseOrderMessage, DetectedProduct } from '@intelligence/order.detector'
import { Emotion, BotIntent, UserMemory } from '@schemas/UserMemory'

/**
 * üß† Este flujo maneja todo lo referente al cat√°logo y pedidos.
 * Se activa tanto para consultas generales como para procesar pedidos estructurados.
 */
export const ecommerceFlow = addKeyword('welcome')  // Reemplazamos por 'welcome' en lugar de EVENTS.WELCOME

  // Acci√≥n que maneja todas las consultas iniciales sobre el cat√°logo
  .addAction(async (ctx: FlowFnProps['ctx'], { flowDynamic, state, gotoFlow }: Omit<FlowFnProps, 'ctx'>) => { // Aseg√∫rate de que gotoFlow est√© disponible aqu√≠
    const { body: text, pushName } = ctx
    const normalizedText = text.toLowerCase().trim()

    const user = await state.getMyState()

    // Detectamos la intenci√≥n del mensaje
    const intent: BotIntent = detectIntent(normalizedText)
    
    // Manejo de consulta sobre cat√°logo
    if (intent === 'catalog') {
      await flowDynamic([
        `üñ§ ¬°Bienvenido a *${empresaConfig.nombre}*!`,
        '‚ú® Aqu√≠ pod√©s ver nuestra colecci√≥n completa:',
        `üåê ${empresaConfig.enlaces.catalogo}`,
        'Si est√°s buscando algo espec√≠fico, cu√©ntame qu√© te gustar√≠a ver y con gusto te ayudo. üòâ'
      ])
      return
    }

    // Manejo de un mensaje sobre precios o productos espec√≠ficos
    if (intent === 'price' || intent === 'order') {
      // Si el mensaje contiene una solicitud de productos
      if (contienePedidoDesdeWeb(normalizedText)) {
        const resultado = parseOrderMessage(normalizedText)

        if (!resultado.esPedidoValido) {
          await flowDynamic([
            '‚ö†Ô∏è No pude interpretar correctamente tu pedido.\n¬øPodr√≠as reenviarlo o escribirlo nuevamente, por favor? üôè'
          ])
          return
        }

        // Confirmaci√≥n del pedido
        const resumen = resultado.productos
          .map(
            (p: DetectedProduct, i: number) =>
              `üõçÔ∏è Producto ${i + 1}:\n‚Ä¢‚Å† Colecci√≥n: ${p.coleccion}\n‚Ä¢‚Å† Nombre: ${p.nombre}\n‚Ä¢‚Å† Talla: ${p.talla}\n‚Ä¢‚Å† Color: ${p.color}\n‚Ä¢‚Å† Precio: $${p.precio}`
          )
          .join('\n\n')

        const total = resultado.productos.reduce((sum, p) => sum + parseFloat(p.precio), 0)

        // Guardamos el estado del usuario y el pedido
        await saveConversationToMongo(ctx.from, {
          name: pushName || 'cliente',
          productos: resultado.productos.map((p) => p.nombre),
          total: total.toFixed(2),
          ultimaIntencion: 'order',
          fechaUltimaCompra: Date.now()
        } as Partial<UserMemory>)

        await flowDynamic([
          `‚ú® Perfecto, ${pushName || 'cliente'}, ya tengo tu pedido registrado. Aqu√≠ est√° el resumen completo:\n\n${resumen}\n\nüí∞ *Total a pagar: $${total.toFixed(2)}*`,
          '¬øC√≥mo prefieres realizar el pago?',
          '1Ô∏è‚É£ *Pago m√≥vil*',
          '2Ô∏è‚É£ *Transferencia bancaria*',
          '3Ô∏è‚É£ *Zelle*',
          '4Ô∏è‚É£ *Binance*',
          '5Ô∏è‚É£ *Efectivo* (al recibir el producto)'
        ])
        
        // Redirigimos a la etapa de pago
        await flowDynamic('üõí Dirigi√©ndote al pago...')
        return await gotoFlow(paymentFlow)  // Aqu√≠, gotoFlow est√° disponible a trav√©s de las herramientas de la acci√≥n
      }

      // Si no es un pedido v√°lido, pedimos detalles
      await flowDynamic([
        '‚ö†Ô∏è No pude interpretar correctamente tu mensaje. ¬øPodr√≠as confirmar tu pedido o enviarlo de nuevo en un formato claro? üôè'
      ])
      return
    }

    // Si el mensaje no contiene un pedido estructurado o reconocible
    await flowDynamic([
      `üëã Estoy aqu√≠ para ayudarte con cualquier consulta sobre nuestro cat√°logo o productos.`,
      'Si est√°s buscando algo espec√≠fico, cu√©ntame qu√© te gustar√≠a ver y con gusto te ayudo. üòâ'
    ])
  })

  // Acci√≥n que maneja cuando el usuario confirma el pedido
  .addAction(async (ctx: FlowFnProps['ctx'], { flowDynamic, state, gotoFlow }: Omit<FlowFnProps, 'ctx'>) => {
    const user = await state.getMyState()
    if (user?.ultimaIntencion === 'order') {
      await flowDynamic([
        `Tu pedido est√° confirmado. üí™üèº El total es de $${user.total}.`,
        '¬°Gracias por tu compra! Procederemos al siguiente paso.'
      ])
      return await gotoFlow(paymentFlow)
    }

    await flowDynamic([
      '‚ö†Ô∏è No pude entender correctamente tu pedido. Por favor, intenta nuevamente o contacta a nuestro equipo de soporte si necesitas ayuda.'
    ])
  })
