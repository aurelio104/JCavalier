import { addKeyword, FlowFnProps } from '@bot-whatsapp/bot'
import { saveConversationToMongo } from '@memory/memory.mongo'
import { empresaConfig } from '../config/empresaConfig'
import axios from 'axios'

// üî§ Elimina acentos
const removeAccents = (str: string): string =>
  str.normalize('NFD').replace(/[ÃÄ-ÕØ]/g, '').toLowerCase()

// üí± Formatea monto en Bs
const formatBs = (monto: number): string =>
  monto.toLocaleString('es-VE', {
    style: 'currency',
    currency: 'VES',
    minimumFractionDigits: 2
  }).replace('Bs', 'Bs')

// üåê Obtiene tasa oficial BCV
async function obtenerTasaBCV(): Promise<number> {
  try {
    const res = await axios.get('https://ve.dolarapi.com/v1/dolares')
    const bcv = res.data.find((x: any) => x.fuente.toLowerCase() === 'oficial')
    const tasa = parseFloat(bcv?.promedio)

    if (!bcv || isNaN(tasa) || tasa <= 0) throw new Error('Tasa no v√°lida')
    console.log('‚úÖ Tasa oficial BCV obtenida:', tasa)
    return tasa
  } catch (error: any) {
    console.error('‚ùå Error obteniendo tasa BCV:', error.message)
    return 0
  }
}

// üßæ Paso 1: Preguntar por el m√©todo de pago
export const pasoMetodoPago = async (
  ctx: FlowFnProps['ctx'],
  { flowDynamic, state }: Omit<FlowFnProps, 'ctx'>
): Promise<void> => {
  const { name = 'cliente' } = await state.getMyState()
  await flowDynamic([
    `¬øC√≥mo prefieres realizar el pago, ${name}?`,
    '',
    '1Ô∏è‚É£ *Pago m√≥vil*',
    '2Ô∏è‚É£ *Transferencia bancaria*',
    '3Ô∏è‚É£ *Zelle*',
    '4Ô∏è‚É£ *Binance*',
    '5Ô∏è‚É£ *Efectivo* (al recibir el producto)'
  ])
}

// üí≥ Paso 2: Procesar el m√©todo de pago
export const pasoProcesarMetodo = async (
  ctx: FlowFnProps['ctx'],
  { state, flowDynamic }: Omit<FlowFnProps, 'ctx'>
): Promise<void> => {
  const respuesta = removeAccents(ctx.body.trim())
  const data = await state.getMyState()
  const name = data.name ?? 'cliente'

  let total = parseFloat(data.total ?? '0')
  if (isNaN(total)) total = 0

  let tasaBCV = data.tasaBCV
  let timestamp = data.timestampTasaBCV || 0
  const vencida = Date.now() - timestamp > 3600000

  if (!tasaBCV || tasaBCV <= 0 || vencida) {
    tasaBCV = await obtenerTasaBCV()
    timestamp = Date.now()
  }

  const totalBs = tasaBCV > 0 ? total * tasaBCV : 0
  const totalLine = `\n\nüí∞ *Total a pagar:* $${total.toFixed(2)}`
  const totalBsLine = totalBs > 0 ? `\nüí∞ *Total en bol√≠vares:* ${formatBs(totalBs)}` : ''

  type MetodoPago = 'Efectivo' | 'Pago m√≥vil' | 'Transferencia bancaria' | 'Zelle' | 'Binance'
  let metodo: MetodoPago | '' = ''
  let mensajePago = ''

  // üíµ Efectivo
  if (/(\b5\b|efectivo)/.test(respuesta)) {
    metodo = 'Efectivo'
    mensajePago = `Perfecto, ${name} üôå Has seleccionado *efectivo al recibir*.

üíµ Tu pedido ser√° entregado personalmente y podr√°s pagar en el momento de la entrega.${totalLine}`
  }

  // üì≤ Pago m√≥vil
  else if (/(\b1\b|pago movil|movil)/.test(respuesta)) {
    metodo = 'Pago m√≥vil'
    mensajePago = `Perfecto, ${name} üôå Aqu√≠ tienes los datos para *Pago M√≥vil*:

üì± Tel√©fono: ${empresaConfig.metodosPago.pagoMovil.telefono}  
üÜî C√©dula: ${empresaConfig.metodosPago.pagoMovil.cedula}  
üè¶ Banco: ${empresaConfig.metodosPago.pagoMovil.banco}${totalLine}${totalBsLine}

üßæ Cuando hagas el pago, env√≠ame el comprobante aqu√≠. üòâ`
  }

  // üè¶ Transferencia
  else if (/(\b2\b|transferencia)/.test(respuesta)) {
    metodo = 'Transferencia bancaria'
    mensajePago = `Perfecto, ${name} üôå Aqu√≠ est√°n los datos para *Transferencia Bancaria*:

üè¶ Banco: ${empresaConfig.metodosPago.transferenciaBancaria.banco}  
üìÑ Cuenta: ${empresaConfig.metodosPago.transferenciaBancaria.cuenta}  
üë§ Titular: ${empresaConfig.metodosPago.transferenciaBancaria.titular}${totalLine}${totalBsLine}

üßæ Env√≠a el comprobante por aqu√≠ cuando est√© listo. üòâ`
  }

  // üí∏ Zelle
  else if (/(\b3\b|zelle)/.test(respuesta)) {
    metodo = 'Zelle'
    mensajePago = `Perfecto, ${name} üôå Puedes pagar v√≠a *Zelle*:

üìß Correo: ${empresaConfig.metodosPago.zelle.correo}${totalLine}

üßæ Luego de transferir, m√°ndame el comprobante. üòâ`
  }

  // ü™ô Binance
  else if (/(\b4\b|binance)/.test(respuesta)) {
    metodo = 'Binance'
    mensajePago = `Perfecto, ${name} üôå Aqu√≠ los datos para *Binance (USDT/BUSD)*:

üìß Correo: ${empresaConfig.metodosPago.binance.correo}${totalLine}

üßæ Cuando completes la transacci√≥n, m√°ndame el comprobante por aqu√≠. üòâ`
  }

  // ‚ùå No identificado
  else {
    return void await flowDynamic([
      '‚ùó No logr√© identificar el m√©todo. Responde con una opci√≥n v√°lida:',
      '',
      '1Ô∏è‚É£ Pago m√≥vil',
      '2Ô∏è‚É£ Transferencia bancaria',
      '3Ô∏è‚É£ Zelle',
      '4Ô∏è‚É£ Binance',
      '5Ô∏è‚É£ Efectivo'
    ])
  }

  await state.update({
    metodoPago: metodo,
    esperandoComprobante: metodo !== 'Efectivo',
    tasaBCV,
    timestampTasaBCV: timestamp,
    total,
    totalBs
  })
  await saveConversationToMongo(ctx.from, await state.getMyState())
  await flowDynamic(mensajePago)
}

// üöÄ Flujo principal
export const paymentFlow = addKeyword('TOTAL_CONFIRMADO')
  .addAction(async (ctx, tools) => pasoMetodoPago(ctx, tools))
  .addAction(async (ctx, tools) => pasoProcesarMetodo(ctx, tools))

export const paymentActions = {
  pasoMetodoPago,
  pasoProcesarMetodo
}
