// ‚úÖ src/flows/payment.flow.ts

import { addKeyword, FlowFnProps } from '@bot-whatsapp/bot'
import { saveConversationToMongo } from '@memory/memory.mongo'
import { empresaConfig } from '../config/empresaConfig'

// üî§ Elimina acentos
const removeAccents = (str: string): string =>
  str.normalize('NFD').replace(/[\u0300-\u036f]/g, '').toLowerCase()

// üßæ Paso 1: Preguntar por el m√©todo de pago
export const pasoMetodoPago = async (
  ctx: FlowFnProps['ctx'],
  { flowDynamic, state }: Omit<FlowFnProps, 'ctx'>
): Promise<void> => {
  const data = await state.getMyState()
  const name = data.name ?? 'cliente'

  await flowDynamic([
    `¬øC√≥mo prefieres realizar el pago, ${name}?`,
    '',
    `1Ô∏è‚É£ *Pago m√≥vil*`,
    `2Ô∏è‚É£ *Transferencia bancaria*`,
    `3Ô∏è‚É£ *Zelle*`,
    `4Ô∏è‚É£ *Binance*`,
    `5Ô∏è‚É£ *Efectivo* (al recibir el producto)`
  ])
}

// üí≥ Paso 2: Procesar el m√©todo de pago
export const pasoProcesarMetodo = async (
  ctx: FlowFnProps['ctx'],
  { state, flowDynamic }: Omit<FlowFnProps, 'ctx'>
): Promise<void> => {
  const respuesta = removeAccents(ctx.body.trim())
  const data = await state.getMyState()
  const name = data.name ?? 'cliente'

  let total = parseFloat(data.total ?? '0')
  if (isNaN(total)) total = 0.0

  type MetodoPago = 'Efectivo' | 'Pago m√≥vil' | 'Transferencia bancaria' | 'Zelle' | 'Binance'
  let metodo: MetodoPago | '' = ''
  let mensajePago = ''
  const totalLine = `\n\nüí∞ *Total a pagar:* $${total.toFixed(2)}\n`

  switch (true) {
    case /(^|\b)(5|efectivo)(\b|$)/.test(respuesta):
      metodo = 'Efectivo'
      mensajePago = `Perfecto, ${name} üôå Has seleccionado *efectivo al recibir*.

üíµ Tu pedido ser√° entregado personalmente, y podr√°s pagar en el momento de la entrega.${totalLine}

Si tienes alguna otra duda, aqu√≠ estoy. üòä`
      await state.update({ metodoPago: metodo, esperandoComprobante: false })
      await saveConversationToMongo(ctx.from, await state.getMyState())
      await flowDynamic(mensajePago)
      return

    case /(^|\b)(1|pago movil|movil)(\b|$)/.test(respuesta):
      metodo = 'Pago m√≥vil'
      mensajePago = `Perfecto, ${name} üôå Aqu√≠ tienes los datos para *Pago M√≥vil*:

üì± *Tel√©fono:* ${empresaConfig.metodosPago.pagoMovil.telefono}  
üÜî *C√©dula:* ${empresaConfig.metodosPago.pagoMovil.cedula}  
üè¶ *Banco:* ${empresaConfig.metodosPago.pagoMovil.banco}${totalLine}

üßæ Cuando hagas el pago, env√≠ame el comprobante aqu√≠. üòâ`
      break

    case /(^|\b)(2|transferencia)(\b|$)/.test(respuesta):
      metodo = 'Transferencia bancaria'
      mensajePago = `Perfecto, ${name} üôå Aqu√≠ est√°n los datos para *Transferencia Bancaria*:

üè¶ *Banco:* ${empresaConfig.metodosPago.transferenciaBancaria.banco}  
üìÑ *Cuenta:* ${empresaConfig.metodosPago.transferenciaBancaria.cuenta}  
üë§ *Titular:* ${empresaConfig.metodosPago.transferenciaBancaria.titular}${totalLine}

üßæ Env√≠a el comprobante por aqu√≠ cuando est√© listo. üòâ`
      break

    case /(^|\b)(3|zelle)(\b|$)/.test(respuesta):
      metodo = 'Zelle'
      mensajePago = `Perfecto, ${name} üôå Puedes pagar v√≠a *Zelle*:

üìß *Correo:* ${empresaConfig.metodosPago.zelle.correo}${totalLine}

üßæ Luego de transferir, m√°ndame el comprobante. üòâ`
      break

    case /(^|\b)(4|binance)(\b|$)/.test(respuesta):
      metodo = 'Binance'
      mensajePago = `Perfecto, ${name} üôå Estos son los datos para *Binance (USDT/BUSD)*:

üìß *Correo:* ${empresaConfig.metodosPago.binance.correo}${totalLine}

üßæ Cuando completes la transacci√≥n, m√°ndame el comprobante por aqu√≠. üòâ`
      break

    default:
      await flowDynamic([
        '‚ùó No logr√© identificar el m√©todo. Por favor respond√© con una opci√≥n v√°lida:',
        '',
        '1Ô∏è‚É£ Pago m√≥vil',
        '2Ô∏è‚É£ Transferencia bancaria',
        '3Ô∏è‚É£ Zelle',
        '4Ô∏è‚É£ Binance',
        '5Ô∏è‚É£ Efectivo'
      ])
      return
  }

  // Guardar m√©todo de pago y activar recepci√≥n de comprobante
  await state.update({ metodoPago: metodo, esperandoComprobante: true })
  await saveConversationToMongo(ctx.from, await state.getMyState())
  await flowDynamic(mensajePago)
}

// üöÄ Flujo principal
export const paymentFlow = addKeyword('TOTAL_CONFIRMADO')
  .addAction(async (ctx, tools) => pasoMetodoPago(ctx, tools))
  .addAction(async (ctx, tools) => pasoProcesarMetodo(ctx, tools))

// üîÅ Exportar acciones
export const paymentActions = {
  pasoMetodoPago,
  pasoProcesarMetodo
}
