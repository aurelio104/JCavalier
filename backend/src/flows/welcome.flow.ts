// âœ… src/flows/welcome.flow.ts

import { WASocket, proto } from '@whiskeysockets/baileys'
import { getUser, saveUser } from '@memory/memory.mongo'
import { analyzeEmotion, detectIntent } from '@intelligence/intent.engine'
import { Emotion, BotIntent, UserHistoryEntry } from '@schemas/UserMemory'
import { empresaConfig } from '../config/empresaConfig'

// FunciÃ³n para obtener el saludo adecuado segÃºn la hora del dÃ­a
function getGreeting(): string {
  const hour = new Date().getHours()
  if (hour < 12) return 'buenos dÃ­as'
  if (hour < 19) return 'buenas tardes'
  return 'buenas noches'
}

// FunciÃ³n para extraer el nombre del usuario del mensaje
function extractName(msg: proto.IWebMessageInfo): string {
  return (
    msg.pushName ||
    msg.key.participant?.split('@')[0] ||
    msg.key.remoteJid?.split('@')[0] ||
    'amigo'  // Valor por defecto si no se puede extraer el nombre
  )
}

// FunciÃ³n para generar el mensaje de bienvenida
function generateWelcomeMessage(name: string, greeting: string, isNew: boolean): string {
  const newUserMessages = [
    `Â¡Hola ${name}, ${greeting}! ðŸŒŸ Bienvenido a ${empresaConfig.nombre}. Estoy aquÃ­ para ayudarte con lo que necesites. PregÃºntame con confianza.`,
    `Â¡Hola ${name}! ${greeting} y bienvenido a ${empresaConfig.nombre}. Si estÃ¡s buscando algo especial, llegaste al lugar indicado. ðŸ–¤`,
    `Â¡QuÃ© gusto saludarte, ${name}! ${greeting} desde ${empresaConfig.nombre}. CuÃ©ntame quÃ© estÃ¡s buscando y comenzamos este viaje de estilo.`
  ]

  const returningUserMessages = [
    `Â¡${name}, quÃ© alegrÃ­a tenerte de vuelta! ${greeting} ðŸ˜Š Â¿En quÃ© puedo ayudarte hoy?`,
    `Â¡Hola otra vez ${name}! Siempre es un placer saludarte. ${greeting}`,
    `Â¡Bienvenido nuevamente, ${name}! Dime cÃ³mo puedo asistirte esta vez.`
  ]

  const messages = isNew ? newUserMessages : returningUserMessages
  return messages[Math.floor(Math.random() * messages.length)]
}

export async function handleWelcome(
  text: string,
  sock: WASocket,
  from: string,
  msg: proto.IWebMessageInfo
): Promise<boolean> {
  const normalized = text.toLowerCase().trim()
  const intent: BotIntent = detectIntent(normalized)

  // Si no es un saludo, retornamos false para que el flujo continÃºe con otro manejador
  if (intent !== 'greeting') return false

  const user = await getUser(from)
  const now = Date.now()
  const name = extractName(msg) // Extraemos el nombre del usuario
  const greeting = getGreeting() // AquÃ­ llamamos a la funciÃ³n para obtener el saludo dependiendo de la hora.
  const isGroup = !!msg.key.participant
  const isNew = !user // Verificamos si el usuario es nuevo o recurrente

  // ðŸ‘¥ Manejo de grupos
  if (isGroup) {
    await sock.sendMessage(from, {
      text: `Â¡Hola grupo! ðŸ‘¥ Soy el asistente de ${empresaConfig.nombre}. EscrÃ­banme en privado si quieren ver el catÃ¡logo, productos o recibir recomendaciones personalizadas.\n\nTambiÃ©n pueden explorar: ${empresaConfig.enlaces.catalogo}`
    })
    return true
  }

  // ðŸ‘‹ Enviar saludo emocional
  const welcomeMessage = generateWelcomeMessage(name, greeting, isNew)
  await sock.sendMessage(from, { text: welcomeMessage })

  // ðŸ§  Registro en memoria del usuario
  const emotion: Emotion = analyzeEmotion(normalized)
  const historyEntry: UserHistoryEntry = {
    timestamp: now,
    message: text,
    intent: 'greeting',
    emotion,
    context: 'entrada'
  }

  const updatedUser = {
    _id: from,
    name,
    firstSeen: user?.firstSeen ?? now,
    lastSeen: now,
    lastMessage: text,
    tags: user?.tags || [],
    history: [...(user?.history || []), historyEntry],
    emotionSummary: emotion,
    needsHuman: false,
    ultimaIntencion: intent
  }

  await saveUser(updatedUser)
  return true
}
